import * as monaco from 'monaco-editor';
import React, { createContext, useCallback, useEffect, useRef } from 'react';
import ts from 'typescript';
import * as ATA from '@typescript/ata';

export type iTypingLibsContext = (code: string, path?: string) => void;

type iTypingLibs = Map<
    string,
    {
        js: monaco.IDisposable;
        ts: monaco.IDisposable;
    }
>;

interface iProps {
    // Set `any` instead `React.ReactChildren`
    // according to https://github.com/microsoft/TypeScript/issues/6471
    children: any;
}

export const TypingLibsContext = createContext<iTypingLibsContext>(() => null);

/***
 * Provider of method that resolves and loads dependencies and store them
 * using monaco.languages.[type|java]script.addExtraLibs.
 * You can pass file value then ATA parse them to find dependency to load.
 * Loaded typing file will be stored to monaco-editor library object.
 *
 * You can grab addTypings from anywhere under this provider.
 *
 * The method generated by useCallback not to occure rerender component.
 * */
export const TypingLibsProvider = ({ children }: iProps) => {
    /**
     * Map of typing Libraries
     *
     * */
    const typingLibs = useRef<iTypingLibs>(
        new Map<string, { js: monaco.IDisposable; ts: monaco.IDisposable }>()
    );

    const ata = useCallback(
        ATA.setupTypeAcquisition({
            projectName: 'My ATA Project',
            typescript: ts,
            logger: console,
            delegate: {
                receivedFile: (code: string, path: string) => {
                    addExtraLibs(code, path);
                },
                started: () => {
                    console.log('ATA start');
                },
                progress: (downloaded: number, total: number) => {
                    console.log(`Got ${downloaded} out of ${total}`);
                },
                finished: (vfs) => {
                    console.log('ata finished');
                    console.log(vfs);
                    debugPrintExtraLibs();
                },
            },
        }),
        []
    );

    /***
     *
     * @param {string} code - Code that you want ata to parse.
     * @param {string} path - Path of file that the code is belongs to.
     *
     * Not to re-render, generated by useCallback.
     * */
    const addTypings: iTypingLibsContext = useCallback(
        (code: string, path?: string): void => {
            if (path) {
                // save latest files value
                addExtraLibs(code, path);
            }
            ata(code);
        },
        []
    );

    useEffect(() => {
        return () => {
            console.log('[TypingLibsContext]on will unmount.');
            // TODO: release ata.
            // TODO: release addTypings.
        };
    }, []);

    const addExtraLibs = (code: string, path: string) => {
        console.log('ATA recievedFile:');
        const cachedLib = typingLibs.current.get(path);
        if (cachedLib) {
            cachedLib.js.dispose();
            cachedLib.ts.dispose();
        }
        // Monaco Uri parsing contains a bug which escapes characters unwantedly.
        // This causes package-names such as `@expo/vector-icons` to not work.
        // https://github.com/Microsoft/monaco-editor/issues/1375
        let uri = monaco.Uri.from({
            scheme: 'file',
            path: path,
        }).toString();
        if (path.includes('@')) {
            uri = uri.replace('%40', '@');
        }

        const js = monaco.languages.typescript.javascriptDefaults.addExtraLib(
            code,
            uri
        );
        const ts = monaco.languages.typescript.typescriptDefaults.addExtraLib(
            code,
            uri
        );
        typingLibs.current.set(path, { js, ts });
    };

    // DEBUG:
    const debugPrintExtraLibs = () => {
        console.log('[TypingLibsContext] extraLibs');
        console.log([...typingLibs.current.entries()]);
    };

    return (
        <TypingLibsContext.Provider value={addTypings}>
            {children}
        </TypingLibsContext.Provider>
    );
};
